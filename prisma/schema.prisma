// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id     Int     @id @default(autoincrement())
  name   String  @db.VarChar
  states State[]
}

model State {
  id         Int     @id @default(autoincrement())
  country    Country @relation(fields: [country_id], references: [id], onDelete: Cascade)
  country_id Int
  name       String  @db.VarChar
  cities     City[]
}

model City {
  id        Int       @id @default(autoincrement())
  state     State     @relation(fields: [state_id], references: [id], onDelete: Cascade)
  state_id  Int
  name      String    @db.VarChar
  addresses Address[]
}

model Address {
  id          Int      @id @default(autoincrement())
  city        City     @relation(fields: [city_id], references: [id], onDelete: Cascade)
  city_id     Int
  postal_code String   @db.VarChar
  street      String   @db.VarChar
  created_at  DateTime @default(now()) @db.Timestamptz()
  updated_at  DateTime @updatedAt @db.Timestamptz()
  board       Board?
  school      School?
}

model Board {
  id                  Int                  @id @default(autoincrement())
  name                String               @unique @db.VarChar
  abbreviation        String               @unique @db.VarChar
  address             Address              @relation(fields: [address_id], references: [id], onDelete: Cascade)
  address_id          Int                  @unique
  created_at          DateTime             @default(now()) @db.Timestamptz()
  updated_at          DateTime             @updatedAt @db.Timestamptz()
  standards           Standard[]
  subjects            Subject[]
  instruction_mediums Instruction_Medium[]
  schools             School[]
  patterns            Pattern[]
}

model Standard {
  id              Int      @id @default(autoincrement())
  board           Board    @relation(fields: [board_id], references: [id], onDelete: Cascade)
  board_id        Int
  name            String   @db.VarChar
  sequence_number Int
  created_at      DateTime @default(now()) @db.Timestamptz()
  updated_at      DateTime @updatedAt @db.Timestamptz()

  school_standards         School_Standard[]
  medium_standard_subjects Medium_Standard_Subject[]
  patterns                 Pattern[]
  chapters                 Chapter[]
  practice_attempts        Practice_Attempt[]

  @@unique([board_id, name])
  @@unique([board_id, sequence_number])
}

model Subject {
  id         Int      @id @default(autoincrement())
  board      Board    @relation(fields: [board_id], references: [id], onDelete: Cascade)
  board_id   Int
  name       String   @db.VarChar
  created_at DateTime @default(now()) @db.Timestamptz()
  updated_at DateTime @updatedAt @db.Timestamptz()

  medium_standard_subjects Medium_Standard_Subject[]
  patterns                 Pattern[]
  chapters                 Chapter[]
  teacher_subjects         Teacher_Subject[]
  practice_attempts        Practice_Attempt[]

  @@unique([board_id, name])
}

model Instruction_Medium {
  id                 Int      @id @default(autoincrement())
  board              Board    @relation(fields: [board_id], references: [id], onDelete: Cascade)
  board_id           Int
  instruction_medium String   @db.VarChar
  created_at         DateTime @default(now()) @db.Timestamptz()
  updated_at         DateTime @updatedAt @db.Timestamptz()

  school_instruction_mediums School_Instruction_Medium[]
  medium_standard_subjects   Medium_Standard_Subject[]
  question_text_topics       Question_Text_Topic_Medium[]
  html_files                 HTML_File[]

  @@unique([board_id, instruction_medium])
}

model School {
  id                       Int      @id @default(autoincrement())
  board                    Board    @relation(fields: [board_id], references: [id], onDelete: Cascade)
  board_id                 Int
  name                     String   @db.VarChar
  address                  Address  @relation(fields: [address_id], references: [id], onDelete: Cascade)
  address_id               Int      @unique
  principal_name           String   @db.VarChar
  email                    String   @db.VarChar
  contact_number           String   @db.VarChar
  alternate_contact_number String?  @db.VarChar
  created_at               DateTime @default(now()) @db.Timestamptz()
  updated_at               DateTime @updatedAt @db.Timestamptz()

  school_instruction_mediums School_Instruction_Medium[]
  school_standards           School_Standard[]
  user_schools               User_School[]
  test_papers                Test_Paper[]
}

model School_Instruction_Medium {
  id                    Int                @id @default(autoincrement())
  instruction_medium    Instruction_Medium @relation(fields: [instruction_medium_id], references: [id], onDelete: Cascade)
  instruction_medium_id Int
  school                School             @relation(fields: [school_id], references: [id], onDelete: Cascade)
  school_id             Int
  created_at            DateTime           @default(now()) @db.Timestamptz()
  updated_at            DateTime           @updatedAt @db.Timestamptz()

  @@unique([school_id, instruction_medium_id])
}

model School_Standard {
  id          Int      @id @default(autoincrement())
  standard    Standard @relation(fields: [standard_id], references: [id], onDelete: Cascade)
  standard_id Int
  school      School   @relation(fields: [school_id], references: [id], onDelete: Cascade)
  school_id   Int
  created_at  DateTime @default(now()) @db.Timestamptz()
  updated_at  DateTime @updatedAt @db.Timestamptz()

  teacher_subjects Teacher_Subject[]
  students         Student[]

  @@unique([school_id, standard_id])
}

model User {
  id                       Int      @id @default(autoincrement())
  email_id                 String   @unique @db.VarChar
  password                 String   @db.VarChar
  name                     String   @db.VarChar
  contact_number           String   @db.VarChar
  alternate_contact_number String?  @db.VarChar
  highest_qualification    String?  @db.VarChar
  status                   Boolean  @default(true)
  created_at               DateTime @default(now()) @db.Timestamptz()
  updated_at               DateTime @updatedAt @db.Timestamptz()

  user_roles       User_Role[]
  user_schools     User_School[]
  teacher_subjects Teacher_Subject[]
  password_resets  Password_Reset[]
  test_papers      Test_Paper[]
  student          Student?
  assigned_tests   Test_Assignment[]
}

model Role {
  id         Int         @id @default(autoincrement())
  role_name  String      @unique @db.VarChar
  user_roles User_Role[]
}

model User_Role {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  role       Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id    Int
  created_at DateTime @default(now()) @db.Timestamptz()

  @@unique([user_id, role_id])
}

model User_School {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  school     School    @relation(fields: [school_id], references: [id], onDelete: Cascade)
  school_id  Int
  start_date DateTime  @db.Date
  end_date   DateTime? @db.Date
  created_at DateTime  @default(now()) @db.Timestamptz()
}

model Medium_Standard_Subject {
  id                    Int                @id @default(autoincrement())
  instruction_medium    Instruction_Medium @relation(fields: [instruction_medium_id], references: [id], onDelete: Cascade)
  instruction_medium_id Int
  standard              Standard           @relation(fields: [standard_id], references: [id], onDelete: Cascade)
  standard_id           Int
  subject               Subject            @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  subject_id            Int
  created_at            DateTime           @default(now()) @db.Timestamptz()
  updated_at            DateTime           @updatedAt @db.Timestamptz()

  @@unique([instruction_medium_id, standard_id, subject_id])
}

model Teacher_Subject {
  id                 Int             @id @default(autoincrement())
  user               User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id            Int
  school_standard    School_Standard @relation(fields: [school_standard_id], references: [id], onDelete: Cascade)
  school_standard_id Int
  subject            Subject         @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  subject_id         Int
  created_at         DateTime        @default(now()) @db.Timestamptz()
  updated_at         DateTime        @updatedAt @db.Timestamptz()

  @@unique([user_id, school_standard_id, subject_id])
}

model Chapter {
  id                        Int      @id @default(autoincrement())
  subject                   Subject  @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  subject_id                Int
  standard                  Standard @relation(fields: [standard_id], references: [id], onDelete: Cascade)
  standard_id               Int
  sequential_chapter_number Int
  name                      String   @db.VarChar
  created_at                DateTime @default(now()) @db.Timestamptz()
  updated_at                DateTime @updatedAt @db.Timestamptz()

  topics              Topic[]
  test_paper_chapters Test_Paper_Chapter[]
  practice_attempts   Practice_Attempt[]

  @@unique([subject_id, standard_id, sequential_chapter_number])
}

model Topic {
  id                      Int      @id @default(autoincrement())
  chapter                 Chapter  @relation(fields: [chapter_id], references: [id], onDelete: Cascade)
  chapter_id              Int
  sequential_topic_number Int
  name                    String   @db.VarChar
  created_at              DateTime @default(now()) @db.Timestamptz()
  updated_at              DateTime @updatedAt @db.Timestamptz()

  question_topics Question_Topic[]
  practice_attempts Practice_Attempt[]
}

model Question_Type {
  id                        Int                        @id @default(autoincrement())
  type_name                 String                     @db.VarChar
  subsection_question_types Subsection_Question_Type[]
  questions                 Question[]
}

model Pattern {
  id           Int      @id @default(autoincrement())
  pattern_name String   @db.VarChar
  board        Board    @relation(fields: [board_id], references: [id], onDelete: Cascade)
  board_id     Int
  standard     Standard @relation(fields: [standard_id], references: [id], onDelete: Cascade)
  standard_id  Int
  subject      Subject  @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  subject_id   Int
  total_marks  Int
  created_at   DateTime @default(now()) @db.Timestamptz()
  updated_at   DateTime @updatedAt @db.Timestamptz()

  sections        Section[]
  test_papers     Test_Paper[]
}

model Section {
  id                  Int      @id @default(autoincrement())
  pattern             Pattern  @relation(fields: [pattern_id], references: [id], onDelete: Cascade)
  pattern_id          Int
  sequence_number     Int
  section_number      Int
  sub_section         String?  @db.VarChar
  section_name        String   @db.VarChar
  total_questions     Int
  mandotory_questions Int
  marks_per_question  Int
  created_at          DateTime @default(now()) @db.Timestamptz()
  updated_at          DateTime @updatedAt @db.Timestamptz()

  subsection_question_types Subsection_Question_Type[]

  @@unique([pattern_id, sequence_number])
}

model Subsection_Question_Type {
  id                           Int           @id @default(autoincrement())
  section                      Section       @relation(fields: [section_id], references: [id], onDelete: Cascade)
  section_id                   Int
  seqencial_subquestion_number Int
  question_type                Question_Type @relation(fields: [question_type_id], references: [id], onDelete: Cascade)
  question_type_id             Int
  created_at                   DateTime      @default(now()) @db.Timestamptz()
  updated_at                   DateTime      @updatedAt @db.Timestamptz()

  @@unique([section_id, seqencial_subquestion_number])
}

model Blacklisted_Token {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
}

model Password_Reset {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  used       Boolean  @default(false)
  expires_at DateTime
  created_at DateTime @default(now())

  @@index([token])
}

model Image {
  id                Int             @id @default(autoincrement())
  image_url         String          @db.VarChar
  original_filename String          @db.VarChar
  file_size         Int // Size in bytes
  file_type         String          @db.VarChar // MIME type (image/jpeg, image/png, etc.)
  width             Int // Image width in pixels
  height            Int // Image height in pixels
  created_at        DateTime        @default(now()) @db.Timestamptz()
  updated_at        DateTime        @updatedAt @db.Timestamptz()
  question_texts    Question_Text[]
  mcq_options       Mcq_Option[]
  match_pairs_left  Match_Pair[]    @relation("LeftImage")
  match_pairs_right Match_Pair[]    @relation("RightImage")
}

model Question {
  id                   Int                   @id @default(autoincrement())
  question_type        Question_Type         @relation(fields: [question_type_id], references: [id], onDelete: Cascade)
  question_type_id     Int
  board_question       Boolean
  created_at           DateTime              @default(now()) @db.Timestamptz()
  updated_at           DateTime              @updatedAt @db.Timestamptz()
  question_texts       Question_Text[]
  question_topics      Question_Topic[]
  student_answers      Student_Answer[]
  practice_answers     Practice_Answer[]
}

model Question_Text {
  id                   Int                          @id @default(autoincrement())
  question             Question                     @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id          Int
  image                Image?                       @relation(fields: [image_id], references: [id], onDelete: SetNull)
  image_id             Int?
  question_text        String
  created_at           DateTime                     @default(now()) @db.Timestamptz()
  updated_at           DateTime                     @updatedAt @db.Timestamptz()
  mcq_options          Mcq_Option[]
  match_pairs          Match_Pair[]
  question_text_topics Question_Text_Topic_Medium[]
  student_answers      Student_Answer[]
  practice_answers     Practice_Answer[]
}

model Question_Text_Topic_Medium {
  id                    Int                @id @default(autoincrement())
  question_text         Question_Text      @relation(fields: [question_text_id], references: [id], onDelete: Cascade)
  question_text_id      Int
  question_topic        Question_Topic     @relation(fields: [question_topic_id], references: [id], onDelete: Cascade)
  question_topic_id     Int
  instruction_medium    Instruction_Medium @relation(fields: [instruction_medium_id], references: [id], onDelete: Cascade)
  instruction_medium_id Int
  is_verified           Boolean            @default(false)
  translation_status    String             @default("original") // Possible values: "original", "translated"
  created_at            DateTime           @default(now()) @db.Timestamptz()
  updated_at            DateTime           @updatedAt @db.Timestamptz()

  @@unique([question_text_id, question_topic_id, instruction_medium_id])
}

model Question_Topic {
  id                   Int                          @id @default(autoincrement())
  question             Question                     @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id          Int
  topic                Topic                        @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  topic_id             Int
  created_at           DateTime                     @default(now()) @db.Timestamptz()
  updated_at           DateTime                     @updatedAt @db.Timestamptz()
  question_text_topics Question_Text_Topic_Medium[]

  @@unique([question_id, topic_id])
}

model Mcq_Option {
  id               Int           @id @default(autoincrement())
  question_text    Question_Text @relation(fields: [question_text_id], references: [id], onDelete: Cascade)
  question_text_id Int
  option_text      String?       @db.VarChar
  image            Image?        @relation(fields: [image_id], references: [id], onDelete: SetNull)
  image_id         Int?
  is_correct       Boolean
  created_at       DateTime      @default(now()) @db.Timestamptz()
  updated_at       DateTime      @updatedAt @db.Timestamptz()
  student_answers  Student_Answer[]
  practice_answers Practice_Answer[]
}

model Match_Pair {
  id               Int           @id @default(autoincrement())
  question_text    Question_Text @relation(fields: [question_text_id], references: [id], onDelete: Cascade)
  question_text_id Int
  left_text        String?       @db.VarChar
  right_text       String?       @db.VarChar
  left_image       Image?        @relation("LeftImage", fields: [left_image_id], references: [id], onDelete: SetNull)
  left_image_id    Int?
  right_image      Image?        @relation("RightImage", fields: [right_image_id], references: [id], onDelete: SetNull)
  right_image_id   Int?
  created_at       DateTime      @default(now()) @db.Timestamptz()
  updated_at       DateTime      @updatedAt @db.Timestamptz()
}

// New enum type for Test_Paper origin
enum TestPaperOriginType {
  board
  other
  both
}

model Test_Paper {
  id                    Int                @id @default(autoincrement())
  name                  String             @db.VarChar
  exam_time             DateTime           @db.Time
  user                  User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id               Int
  school                School             @relation(fields: [school_id], references: [id], onDelete: Cascade)
  school_id             Int
  pattern               Pattern            @relation(fields: [pattern_id], references: [id], onDelete: Cascade)
  pattern_id            Int
  test_paper_origin_type TestPaperOriginType?
  created_at            DateTime           @default(now()) @db.Timestamptz()
  updated_at            DateTime           @updatedAt @db.Timestamptz()
  
  test_paper_chapters   Test_Paper_Chapter[]
  html_files            HTML_File[]
  test_assignments      Test_Assignment[]
}

model HTML_File {
  id                    Int                @id @default(autoincrement())
  test_paper            Test_Paper         @relation(fields: [test_paper_id], references: [id], onDelete: Cascade)
  test_paper_id         Int                
  content_url           String             @db.VarChar // URL to the HTML file stored in AWS
  instruction_medium    Instruction_Medium @relation(fields: [instruction_medium_id], references: [id], onDelete: Cascade)
  instruction_medium_id Int
  is_default_medium     Boolean            @default(false) // Flag to mark this as the default/primary language version
  version               Int                @default(1) // To track revisions of the same medium
  file_size             Int?               // Size in bytes
  is_pdf                Boolean            @default(false) // Flag to identify if it's stored as PDF
  access_count          Int                @default(0) // Track how many times this has been accessed
  last_accessed         DateTime?          // When was this file last accessed
  created_at            DateTime           @default(now()) @db.Timestamptz()
  updated_at            DateTime           @updatedAt @db.Timestamptz()
  
  @@unique([test_paper_id, instruction_medium_id])
}

model Test_Paper_Chapter {
  id                Int        @id @default(autoincrement())
  test_paper        Test_Paper @relation(fields: [test_paper_id], references: [id], onDelete: Cascade)
  test_paper_id     Int
  chapter           Chapter    @relation(fields: [chapter_id], references: [id], onDelete: Cascade)
  chapter_id        Int
  weightage         Int
  created_at        DateTime   @default(now()) @db.Timestamptz()
}

// Student-related models based on hollow prototype analysis

// Student profile extension (extends User model)
model Student {
  id                    Int             @id @default(autoincrement())
  user                  User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id               Int             @unique
  student_id            String          @db.VarChar // Student ID/Roll Number from registration form
  date_of_birth         DateTime?       @db.Date
  enrollment_date       DateTime        @default(now()) @db.Date
  school_standard       School_Standard @relation(fields: [school_standard_id], references: [id], onDelete: Cascade)
  school_standard_id    Int
  status                String          @default("active") @db.VarChar // active, inactive, graduated
  created_at            DateTime        @default(now()) @db.Timestamptz()
  updated_at            DateTime        @updatedAt @db.Timestamptz()

  // Relations
  test_assignments      Test_Assignment[]
  test_attempts         Test_Attempt[]
  practice_attempts     Practice_Attempt[]
  student_results       Student_Result[]
  student_analytics     Student_Analytics?
  student_notifications Student_Notification[]

  @@unique([student_id, school_standard_id])
}

// Test assignments for students
model Test_Assignment {
  id                    Int      @id @default(autoincrement())
  student               Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  student_id            Int
  test_paper            Test_Paper @relation(fields: [test_paper_id], references: [id], onDelete: Cascade)
  test_paper_id         Int
  assigned_by           User     @relation(fields: [assigned_by_user_id], references: [id], onDelete: Cascade)
  assigned_by_user_id   Int      // Teacher who assigned the test
  assigned_date         DateTime @default(now()) @db.Timestamptz()
  due_date              DateTime @db.Timestamptz()
  available_from        DateTime @db.Timestamptz()
  max_attempts          Int      @default(1)
  time_limit_minutes    Int?     // Override test paper time limit if needed
  status                String   @default("assigned") @db.VarChar // assigned, active, completed, expired
  created_at            DateTime @default(now()) @db.Timestamptz()
  updated_at            DateTime @updatedAt @db.Timestamptz()

  // Relations
  test_attempts         Test_Attempt[]

  @@unique([student_id, test_paper_id])
}

// Student test attempts
model Test_Attempt {
  id                    Int             @id @default(autoincrement())
  student               Student         @relation(fields: [student_id], references: [id], onDelete: Cascade)
  student_id            Int
  test_assignment       Test_Assignment @relation(fields: [test_assignment_id], references: [id], onDelete: Cascade)
  test_assignment_id    Int
  attempt_number        Int             @default(1)
  started_at            DateTime        @default(now()) @db.Timestamptz()
  submitted_at          DateTime?       @db.Timestamptz()
  time_taken_seconds    Int?            // Actual time taken in seconds
  status                String          @default("in_progress") @db.VarChar // in_progress, completed, abandoned, auto_submitted
  current_question      Int?            // For resuming tests
  is_practice           Boolean         @default(false)
  created_at            DateTime        @default(now()) @db.Timestamptz()
  updated_at            DateTime        @updatedAt @db.Timestamptz()

  // Relations
  student_answers       Student_Answer[]
  student_result        Student_Result?
}

// Practice test attempts (for unlimited practice)
model Practice_Attempt {
  id                    Int      @id @default(autoincrement())
  student               Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  student_id            Int
  subject               Subject  @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  subject_id            Int
  standard              Standard @relation(fields: [standard_id], references: [id], onDelete: Cascade)
  standard_id           Int
  chapter               Chapter? @relation(fields: [chapter_id], references: [id], onDelete: SetNull)
  chapter_id            Int?     // Optional - for chapter-specific practice
  topic                 Topic?   @relation(fields: [topic_id], references: [id], onDelete: SetNull)
  topic_id              Int?     // Optional - for topic-specific practice
  total_questions       Int
  started_at            DateTime @default(now()) @db.Timestamptz()
  completed_at          DateTime? @db.Timestamptz()
  time_taken_seconds    Int?
  score_percentage      Float?
  correct_answers       Int?
  wrong_answers         Int?
  skipped_answers       Int?
  created_at            DateTime @default(now()) @db.Timestamptz()

  // Relations
  practice_answers      Practice_Answer[]
}

// Student answers for assigned tests (MCQ only)
model Student_Answer {
  id                    Int          @id @default(autoincrement())
  test_attempt          Test_Attempt @relation(fields: [test_attempt_id], references: [id], onDelete: Cascade)
  test_attempt_id       Int
  question              Question     @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id           Int
  question_text         Question_Text @relation(fields: [question_text_id], references: [id], onDelete: Cascade)
  question_text_id      Int
  selected_option       Mcq_Option?  @relation(fields: [selected_option_id], references: [id], onDelete: SetNull)
  selected_option_id    Int?         // For MCQ questions
  is_correct            Boolean?     // Calculated after submission
  marks_obtained        Float?       // Marks for this answer
  time_spent_seconds    Int?         // Time spent on this question
  is_flagged            Boolean      @default(false) // Student flagged for review
  answered_at           DateTime     @default(now()) @db.Timestamptz()

  @@unique([test_attempt_id, question_id])
}

// Student answers for practice tests (MCQ only)
model Practice_Answer {
  id                    Int              @id @default(autoincrement())
  practice_attempt      Practice_Attempt @relation(fields: [practice_attempt_id], references: [id], onDelete: Cascade)
  practice_attempt_id   Int
  question              Question         @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id           Int
  question_text         Question_Text    @relation(fields: [question_text_id], references: [id], onDelete: Cascade)
  question_text_id      Int
  selected_option       Mcq_Option?      @relation(fields: [selected_option_id], references: [id], onDelete: SetNull)
  selected_option_id    Int?             // For MCQ questions
  is_correct            Boolean?         // Calculated after submission
  time_spent_seconds    Int?             // Time spent on this question
  answered_at           DateTime         @default(now()) @db.Timestamptz()

  @@unique([practice_attempt_id, question_id])
}

// Student test results and performance tracking
model Student_Result {
  id                    Int          @id @default(autoincrement())
  student               Student      @relation(fields: [student_id], references: [id], onDelete: Cascade)
  student_id            Int
  test_attempt          Test_Attempt @relation(fields: [test_attempt_id], references: [id], onDelete: Cascade)
  test_attempt_id       Int          @unique
  total_questions       Int
  attempted_questions   Int
  correct_answers       Int
  wrong_answers         Int
  skipped_questions     Int
  total_marks           Float
  obtained_marks        Float
  percentage            Float
  grade                 String?      @db.VarChar // A+, A, B+, etc.
  rank_in_standard      Int?
  time_taken_seconds    Int
  performance_level     String       @db.VarChar // excellent, good, average, poor
  subject_wise_scores   Json?        // Breakdown by subject/chapter
  chapter_wise_analysis   Json?        // Detailed topic analysis
  strengths             Json?        // Array of strong topics
  weaknesses            Json?        // Array of weak topics
  recommendations       Json?        // Improvement suggestions
  created_at            DateTime     @default(now()) @db.Timestamptz()
  updated_at            DateTime     @updatedAt @db.Timestamptz()
}

// Student performance analytics and progress tracking
model Student_Analytics {
  id                    Int      @id @default(autoincrement())
  student               Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  student_id            Int      @unique
  total_tests_taken     Int      @default(0)
  total_practice_tests  Int      @default(0)
  average_score         Float?
  best_score            Float?
  worst_score           Float?
  last_score            Float?
  created_at            DateTime @default(now()) @db.Timestamptz()
  updated_at            DateTime @updatedAt @db.Timestamptz()
}

// Student notifications and announcements
model Student_Notification {
  id                    Int      @id @default(autoincrement())
  student               Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  student_id            Int
  title                 String   @db.VarChar
  message               String   @db.Text
  type                  String   @db.VarChar // test_assigned, result_published, reminder, announcement
  priority              String   @default("normal") @db.VarChar // high, normal, low
  is_read               Boolean  @default(false)
  action_url            String?  @db.VarChar // Link to relevant page
  expires_at            DateTime? @db.Timestamptz()
  created_at            DateTime @default(now()) @db.Timestamptz()
}
